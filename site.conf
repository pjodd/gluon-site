-- This is Pjodd site configuration for Gluon v2018.1
--
-- Take a look at the documentation located at
-- http://gluon.readthedocs.org/ for details.
{
  -- Used for generated hostnames, e.g. pjodd-abcdef123456. (optional)
  hostname_prefix = 'pjodd-',

  -- Name of the community.
  site_name = 'Pjodd',

  -- Shorthand of the community.
  site_code = 'pjodd',

  -- 32 bytes of random data, encoded in hexadecimal
  -- This data must be unique among all sites and domains!
  -- Can be generated using: echo $(hexdump -v -n 32 -e '1/1 "%02x"' </dev/urandom)
  domain_seed = '1e93707357cb129a5a87d752610f098cfbaf71be8fa290c26cd31bf6f88b7bdc',

  -- Prefixes used within the mesh.
  -- prefix6 is required, prefix4 can be omitted if next_node.ip4
  -- is not set.
  prefix4 = '10.46.0.0/16',
  prefix6 = 'fdec:910d:d05e::/64',

  -- Timezone of your community.
  -- See http://wiki.openwrt.org/doc/uci/system#time_zones
  timezone = 'CET-1CEST,M3.5.0,M10.5.0/3',

  -- List of NTP servers in your community.
  -- Must be reachable using IPv6!
  ntp_servers = {'ntp.services.pjodd', 'ntp.se'},

  -- Wireless regulatory domain of your community.
  regdom = 'SE',

  -- Wireless configuration for 2.4 GHz interfaces.
  wifi24 = {
    -- Wireless channel.
    channel = 1,

    -- List of supported wifi rates (optional)
    -- Example removes 802.11b compatibility for better performance
    supported_rates = {6000, 9000, 12000, 18000, 24000, 36000, 48000, 54000},

    -- List of basic wifi rates (optional, required if supported_rates is set)
    -- Example removes 802.11b compatibility for better performance
    basic_rate = {6000, 9000, 18000, 36000, 54000},

    -- ESSID used for client network.
    ap = {
      ssid = 'pjodd.se',
      -- disabled = true, (optional)
    },

    mesh = {
      -- Adjust these values!
      id = 'pjodd-mesh',
      mcast_rate = 12000,
      -- disabled = true, (optional)
    },
  },

  -- Wireless configuration for 5 GHz interfaces.
  -- This should be equal to the 2.4 GHz variant, except
  -- for channel.
  wifi5 = {
    channel = 44,
    ap = {
      ssid = 'pjodd.se',
    },
    mesh = {
      id = 'pjodd-mesh',
      mcast_rate = 12000,
    },
  },

  mesh = {
    vxlan = true,
  },

  -- The next node feature allows clients to always reach the node it is
  -- connected to using a known IP address.
  next_node = {
    -- anycast IPs of all nodes
    ip4 = '10.46.254.254',
    ip6 = 'fdec:910d:d05e::cafe',

    -- anycast MAC of all nodes
    mac = '00:91:0d:d0:5e:00',
  },

  -- Options specific to routing protocols (optional)
  -- mesh = {
    -- Options specific to the batman-adv routing protocol (optional)
    -- batman_adv = {
      -- Gateway selection class (optional)
      -- The default class 20 is based on the link quality (TQ) only,
      -- class 1 is calculated from both the TQ and the announced bandwidth
      -- gw_sel_class = 1,
    -- },
  -- },

  mesh_vpn = {
    -- enabled = true,
    mtu = 1560,

    fastd = {
      -- Refer to http://fastd.readthedocs.org/en/latest/ to better understand
      -- what these options do.

      -- List of crypto-methods to use.
      methods = {'salsa2012+umac'},
      -- configurable = true,
      -- syslog_level = 'warn',

      groups = {
        backbone = {
          -- Limit number of connected peers to reduce bandwidth.
          limit = 1,

          -- List of peers.
          peers = {
            gw01 = {
              key = 'b5fdd77aaef60ef6e316ffce19aa5679795ea333befe66f2fc9b09d66ab28929',

              -- This is a list, so you might add multiple entries.
              remotes = {
                'ipv4 "gateway-01.mesh.pjodd.se" port 10006'
              },
            },
            gw05 = {
              key = '37e385141d5007243b6dccd4a14f72ea04b99f2d6288bcb744b777e2cba0f7d0',

              -- This is a list, so you might add multiple entries.
              remotes = {
                'ipv4 "198.167.222.5" port 10006',
                'ipv6 "2c0f:f930:0:4::5" port 10006'
              },
            },
            gw06 = {
              key = 'c383036a2bab6fa1efc9e468717aab1b7860485b77f1a5f4fb2249df856a3a00',

              -- This is a list, so you might add multiple entries.
              remotes = {
                'ipv4 "198.167.222.6" port 10006',
                'ipv6 "2c0f:f930:0:4::6" port 10006'
              },
            },
          },

          -- Optional: nested peer groups
          -- groups = {
          --   backbone_sub = {
          --     ...
          --   },
          --   ...
          -- },
        },
        -- Optional: additional peer groups, possibly with other limits
        -- backbone2 = {
        --   ...
        -- },
      },
    },

    bandwidth_limit = {
      -- The bandwidth limit can be enabled by default here.
      enabled = false,

      -- Default upload limit (kbit/s).
      egress = 10000,

      -- Default download limit (kbit/s).
      ingress = 10000,
    },
  },

  autoupdater = {
    -- Default branch. Don't forget to set GLUON_BRANCH when building!
    branch = 'stable',

    -- List of branches. You may define multiple branches.
    branches = {
      stable = {
        name = 'stable',

        -- List of mirrors to fetch images from. IPv6 required!
        mirrors = {'http://updates.services.pjodd/firmware/stable/sysupgrade'},

        -- Number of good signatures required.
        -- Have multiple maintainers sign your build and only
        -- accept it when a sufficient number of them have
        -- signed it.

        -- We need more people that can sign...
        good_signatures = 1,

        -- List of public keys of maintainers.
        pubkeys = {
                '9fbcdb922182d6b4963746ce8158d9de3d95a201ffe455b178f733d043290496', -- Kalle
                'cee7412b620bebbea420e2c9bc491b3aef4bb5721e38bb65823703f5c69ec506', -- omni
        },
      },

      beta = {
        name = 'beta',

        -- List of mirrors to fetch images from. IPv6 required!
        mirrors = {'http://updates.services.pjodd/firmware/beta/sysupgrade'},

        -- Number of good signatures required.
        -- Have multiple maintainers sign your build and only
        -- accept it when a sufficient number of them have
        -- signed it.

        -- We need more people that can sign...
        good_signatures = 1,

        -- List of public keys of maintainers.
        pubkeys = {
                '9fbcdb922182d6b4963746ce8158d9de3d95a201ffe455b178f733d043290496', -- Kalle
                'cee7412b620bebbea420e2c9bc491b3aef4bb5721e38bb65823703f5c69ec506', -- omni
        },
      },

      experimental = {
        name = 'experimental',

        -- List of mirrors to fetch images from. IPv6 required!
        mirrors = {'http://updates.services.pjodd/firmware/experimental/sysupgrade'},

        -- Number of good signatures required.
        -- Have multiple maintainers sign your build and only
        -- accept it when a sufficient number of them have
        -- signed it.

        -- We need more people that can sign...
        good_signatures = 1,

        -- List of public keys of maintainers.
        pubkeys = {
                '9fbcdb922182d6b4963746ce8158d9de3d95a201ffe455b178f733d043290496', -- Kalle
                'cee7412b620bebbea420e2c9bc491b3aef4bb5721e38bb65823703f5c69ec506', -- omni
        },
      },

    },
  },

}
